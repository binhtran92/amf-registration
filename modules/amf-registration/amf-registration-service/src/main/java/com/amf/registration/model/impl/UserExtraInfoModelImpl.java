/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.amf.registration.model.impl;

import com.amf.registration.model.UserExtraInfo;
import com.amf.registration.model.UserExtraInfoModel;

import com.liferay.expando.kernel.model.ExpandoBridge;
import com.liferay.expando.kernel.util.ExpandoBridgeFactoryUtil;
import com.liferay.petra.string.StringBundler;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.exception.PortalException;
import com.liferay.portal.kernel.model.CacheModel;
import com.liferay.portal.kernel.model.ModelWrapper;
import com.liferay.portal.kernel.model.User;
import com.liferay.portal.kernel.model.impl.BaseModelImpl;
import com.liferay.portal.kernel.service.ServiceContext;
import com.liferay.portal.kernel.service.UserLocalServiceUtil;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;

import java.io.Serializable;

import java.lang.reflect.Constructor;
import java.lang.reflect.InvocationHandler;

import java.sql.Types;

import java.util.Collections;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.Map;
import java.util.function.BiConsumer;
import java.util.function.Function;

/**
 * The base model implementation for the UserExtraInfo service. Represents a row in the &quot;AMF_UserExtraInfo&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface <code>UserExtraInfoModel</code> exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link UserExtraInfoImpl}.
 * </p>
 *
 * @author Brian Wing Shun Chan
 * @see UserExtraInfoImpl
 * @generated
 */
public class UserExtraInfoModelImpl
	extends BaseModelImpl<UserExtraInfo> implements UserExtraInfoModel {

	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a user extra info model instance should use the <code>UserExtraInfo</code> interface instead.
	 */
	public static final String TABLE_NAME = "AMF_UserExtraInfo";

	public static final Object[][] TABLE_COLUMNS = {
		{"uuid_", Types.VARCHAR}, {"extraInfoId", Types.BIGINT},
		{"userId", Types.BIGINT}, {"address", Types.VARCHAR},
		{"address2", Types.VARCHAR}, {"city", Types.VARCHAR},
		{"state_", Types.INTEGER}, {"zip", Types.VARCHAR}
	};

	public static final Map<String, Integer> TABLE_COLUMNS_MAP =
		new HashMap<String, Integer>();

	static {
		TABLE_COLUMNS_MAP.put("uuid_", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("extraInfoId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("userId", Types.BIGINT);
		TABLE_COLUMNS_MAP.put("address", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("address2", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("city", Types.VARCHAR);
		TABLE_COLUMNS_MAP.put("state_", Types.INTEGER);
		TABLE_COLUMNS_MAP.put("zip", Types.VARCHAR);
	}

	public static final String TABLE_SQL_CREATE =
		"create table AMF_UserExtraInfo (uuid_ VARCHAR(75) null,extraInfoId LONG not null primary key,userId LONG,address VARCHAR(255) null,address2 VARCHAR(255) null,city VARCHAR(255) null,state_ INTEGER,zip VARCHAR(5) null)";

	public static final String TABLE_SQL_DROP = "drop table AMF_UserExtraInfo";

	public static final String ORDER_BY_JPQL =
		" ORDER BY userExtraInfo.userId ASC";

	public static final String ORDER_BY_SQL =
		" ORDER BY AMF_UserExtraInfo.userId ASC";

	public static final String DATA_SOURCE = "liferayDataSource";

	public static final String SESSION_FACTORY = "liferaySessionFactory";

	public static final String TX_MANAGER = "liferayTransactionManager";

	public static final long UUID_COLUMN_BITMASK = 1L;

	public static final long USERID_COLUMN_BITMASK = 2L;

	public static void setEntityCacheEnabled(boolean entityCacheEnabled) {
		_entityCacheEnabled = entityCacheEnabled;
	}

	public static void setFinderCacheEnabled(boolean finderCacheEnabled) {
		_finderCacheEnabled = finderCacheEnabled;
	}

	public UserExtraInfoModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _extraInfoId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setExtraInfoId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _extraInfoId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return UserExtraInfo.class;
	}

	@Override
	public String getModelClassName() {
		return UserExtraInfo.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		Map<String, Function<UserExtraInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		for (Map.Entry<String, Function<UserExtraInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserExtraInfo, Object> attributeGetterFunction =
				entry.getValue();

			attributes.put(
				attributeName,
				attributeGetterFunction.apply((UserExtraInfo)this));
		}

		attributes.put("entityCacheEnabled", isEntityCacheEnabled());
		attributes.put("finderCacheEnabled", isFinderCacheEnabled());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Map<String, BiConsumer<UserExtraInfo, Object>>
			attributeSetterBiConsumers = getAttributeSetterBiConsumers();

		for (Map.Entry<String, Object> entry : attributes.entrySet()) {
			String attributeName = entry.getKey();

			BiConsumer<UserExtraInfo, Object> attributeSetterBiConsumer =
				attributeSetterBiConsumers.get(attributeName);

			if (attributeSetterBiConsumer != null) {
				attributeSetterBiConsumer.accept(
					(UserExtraInfo)this, entry.getValue());
			}
		}
	}

	public Map<String, Function<UserExtraInfo, Object>>
		getAttributeGetterFunctions() {

		return _attributeGetterFunctions;
	}

	public Map<String, BiConsumer<UserExtraInfo, Object>>
		getAttributeSetterBiConsumers() {

		return _attributeSetterBiConsumers;
	}

	private static Function<InvocationHandler, UserExtraInfo>
		_getProxyProviderFunction() {

		Class<?> proxyClass = ProxyUtil.getProxyClass(
			UserExtraInfo.class.getClassLoader(), UserExtraInfo.class,
			ModelWrapper.class);

		try {
			Constructor<UserExtraInfo> constructor =
				(Constructor<UserExtraInfo>)proxyClass.getConstructor(
					InvocationHandler.class);

			return invocationHandler -> {
				try {
					return constructor.newInstance(invocationHandler);
				}
				catch (ReflectiveOperationException
							reflectiveOperationException) {

					throw new InternalError(reflectiveOperationException);
				}
			};
		}
		catch (NoSuchMethodException noSuchMethodException) {
			throw new InternalError(noSuchMethodException);
		}
	}

	private static final Map<String, Function<UserExtraInfo, Object>>
		_attributeGetterFunctions;
	private static final Map<String, BiConsumer<UserExtraInfo, Object>>
		_attributeSetterBiConsumers;

	static {
		Map<String, Function<UserExtraInfo, Object>> attributeGetterFunctions =
			new LinkedHashMap<String, Function<UserExtraInfo, Object>>();
		Map<String, BiConsumer<UserExtraInfo, ?>> attributeSetterBiConsumers =
			new LinkedHashMap<String, BiConsumer<UserExtraInfo, ?>>();

		attributeGetterFunctions.put("uuid", UserExtraInfo::getUuid);
		attributeSetterBiConsumers.put(
			"uuid", (BiConsumer<UserExtraInfo, String>)UserExtraInfo::setUuid);
		attributeGetterFunctions.put(
			"extraInfoId", UserExtraInfo::getExtraInfoId);
		attributeSetterBiConsumers.put(
			"extraInfoId",
			(BiConsumer<UserExtraInfo, Long>)UserExtraInfo::setExtraInfoId);
		attributeGetterFunctions.put("userId", UserExtraInfo::getUserId);
		attributeSetterBiConsumers.put(
			"userId",
			(BiConsumer<UserExtraInfo, Long>)UserExtraInfo::setUserId);
		attributeGetterFunctions.put("address", UserExtraInfo::getAddress);
		attributeSetterBiConsumers.put(
			"address",
			(BiConsumer<UserExtraInfo, String>)UserExtraInfo::setAddress);
		attributeGetterFunctions.put("address2", UserExtraInfo::getAddress2);
		attributeSetterBiConsumers.put(
			"address2",
			(BiConsumer<UserExtraInfo, String>)UserExtraInfo::setAddress2);
		attributeGetterFunctions.put("city", UserExtraInfo::getCity);
		attributeSetterBiConsumers.put(
			"city", (BiConsumer<UserExtraInfo, String>)UserExtraInfo::setCity);
		attributeGetterFunctions.put("state", UserExtraInfo::getState);
		attributeSetterBiConsumers.put(
			"state",
			(BiConsumer<UserExtraInfo, Integer>)UserExtraInfo::setState);
		attributeGetterFunctions.put("zip", UserExtraInfo::getZip);
		attributeSetterBiConsumers.put(
			"zip", (BiConsumer<UserExtraInfo, String>)UserExtraInfo::setZip);

		_attributeGetterFunctions = Collections.unmodifiableMap(
			attributeGetterFunctions);
		_attributeSetterBiConsumers = Collections.unmodifiableMap(
			(Map)attributeSetterBiConsumers);
	}

	@Override
	public String getUuid() {
		if (_uuid == null) {
			return "";
		}
		else {
			return _uuid;
		}
	}

	@Override
	public void setUuid(String uuid) {
		_columnBitmask |= UUID_COLUMN_BITMASK;

		if (_originalUuid == null) {
			_originalUuid = _uuid;
		}

		_uuid = uuid;
	}

	public String getOriginalUuid() {
		return GetterUtil.getString(_originalUuid);
	}

	@Override
	public long getExtraInfoId() {
		return _extraInfoId;
	}

	@Override
	public void setExtraInfoId(long extraInfoId) {
		_extraInfoId = extraInfoId;
	}

	@Override
	public long getUserId() {
		return _userId;
	}

	@Override
	public void setUserId(long userId) {
		_columnBitmask = -1L;

		_userId = userId;
	}

	@Override
	public String getUserUuid() {
		try {
			User user = UserLocalServiceUtil.getUserById(getUserId());

			return user.getUuid();
		}
		catch (PortalException portalException) {
			return "";
		}
	}

	@Override
	public void setUserUuid(String userUuid) {
	}

	@Override
	public String getAddress() {
		if (_address == null) {
			return "";
		}
		else {
			return _address;
		}
	}

	@Override
	public void setAddress(String address) {
		_address = address;
	}

	@Override
	public String getAddress2() {
		if (_address2 == null) {
			return "";
		}
		else {
			return _address2;
		}
	}

	@Override
	public void setAddress2(String address2) {
		_address2 = address2;
	}

	@Override
	public String getCity() {
		if (_city == null) {
			return "";
		}
		else {
			return _city;
		}
	}

	@Override
	public void setCity(String city) {
		_city = city;
	}

	@Override
	public int getState() {
		return _state;
	}

	@Override
	public void setState(int state) {
		_state = state;
	}

	@Override
	public String getZip() {
		if (_zip == null) {
			return "";
		}
		else {
			return _zip;
		}
	}

	@Override
	public void setZip(String zip) {
		_zip = zip;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(
			0, UserExtraInfo.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public UserExtraInfo toEscapedModel() {
		if (_escapedModel == null) {
			Function<InvocationHandler, UserExtraInfo>
				escapedModelProxyProviderFunction =
					EscapedModelProxyProviderFunctionHolder.
						_escapedModelProxyProviderFunction;

			_escapedModel = escapedModelProxyProviderFunction.apply(
				new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		UserExtraInfoImpl userExtraInfoImpl = new UserExtraInfoImpl();

		userExtraInfoImpl.setUuid(getUuid());
		userExtraInfoImpl.setExtraInfoId(getExtraInfoId());
		userExtraInfoImpl.setUserId(getUserId());
		userExtraInfoImpl.setAddress(getAddress());
		userExtraInfoImpl.setAddress2(getAddress2());
		userExtraInfoImpl.setCity(getCity());
		userExtraInfoImpl.setState(getState());
		userExtraInfoImpl.setZip(getZip());

		userExtraInfoImpl.resetOriginalValues();

		return userExtraInfoImpl;
	}

	@Override
	public int compareTo(UserExtraInfo userExtraInfo) {
		int value = 0;

		if (getUserId() < userExtraInfo.getUserId()) {
			value = -1;
		}
		else if (getUserId() > userExtraInfo.getUserId()) {
			value = 1;
		}
		else {
			value = 0;
		}

		if (value != 0) {
			return value;
		}

		return 0;
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof UserExtraInfo)) {
			return false;
		}

		UserExtraInfo userExtraInfo = (UserExtraInfo)obj;

		long primaryKey = userExtraInfo.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public boolean isEntityCacheEnabled() {
		return _entityCacheEnabled;
	}

	@Override
	public boolean isFinderCacheEnabled() {
		return _finderCacheEnabled;
	}

	@Override
	public void resetOriginalValues() {
		UserExtraInfoModelImpl userExtraInfoModelImpl = this;

		userExtraInfoModelImpl._originalUuid = userExtraInfoModelImpl._uuid;

		userExtraInfoModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<UserExtraInfo> toCacheModel() {
		UserExtraInfoCacheModel userExtraInfoCacheModel =
			new UserExtraInfoCacheModel();

		userExtraInfoCacheModel.uuid = getUuid();

		String uuid = userExtraInfoCacheModel.uuid;

		if ((uuid != null) && (uuid.length() == 0)) {
			userExtraInfoCacheModel.uuid = null;
		}

		userExtraInfoCacheModel.extraInfoId = getExtraInfoId();

		userExtraInfoCacheModel.userId = getUserId();

		userExtraInfoCacheModel.address = getAddress();

		String address = userExtraInfoCacheModel.address;

		if ((address != null) && (address.length() == 0)) {
			userExtraInfoCacheModel.address = null;
		}

		userExtraInfoCacheModel.address2 = getAddress2();

		String address2 = userExtraInfoCacheModel.address2;

		if ((address2 != null) && (address2.length() == 0)) {
			userExtraInfoCacheModel.address2 = null;
		}

		userExtraInfoCacheModel.city = getCity();

		String city = userExtraInfoCacheModel.city;

		if ((city != null) && (city.length() == 0)) {
			userExtraInfoCacheModel.city = null;
		}

		userExtraInfoCacheModel.state = getState();

		userExtraInfoCacheModel.zip = getZip();

		String zip = userExtraInfoCacheModel.zip;

		if ((zip != null) && (zip.length() == 0)) {
			userExtraInfoCacheModel.zip = null;
		}

		return userExtraInfoCacheModel;
	}

	@Override
	public String toString() {
		Map<String, Function<UserExtraInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			4 * attributeGetterFunctions.size() + 2);

		sb.append("{");

		for (Map.Entry<String, Function<UserExtraInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserExtraInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append(attributeName);
			sb.append("=");
			sb.append(attributeGetterFunction.apply((UserExtraInfo)this));
			sb.append(", ");
		}

		if (sb.index() > 1) {
			sb.setIndex(sb.index() - 1);
		}

		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		Map<String, Function<UserExtraInfo, Object>> attributeGetterFunctions =
			getAttributeGetterFunctions();

		StringBundler sb = new StringBundler(
			5 * attributeGetterFunctions.size() + 4);

		sb.append("<model><model-name>");
		sb.append(getModelClassName());
		sb.append("</model-name>");

		for (Map.Entry<String, Function<UserExtraInfo, Object>> entry :
				attributeGetterFunctions.entrySet()) {

			String attributeName = entry.getKey();
			Function<UserExtraInfo, Object> attributeGetterFunction =
				entry.getValue();

			sb.append("<column><column-name>");
			sb.append(attributeName);
			sb.append("</column-name><column-value><![CDATA[");
			sb.append(attributeGetterFunction.apply((UserExtraInfo)this));
			sb.append("]]></column-value></column>");
		}

		sb.append("</model>");

		return sb.toString();
	}

	private static class EscapedModelProxyProviderFunctionHolder {

		private static final Function<InvocationHandler, UserExtraInfo>
			_escapedModelProxyProviderFunction = _getProxyProviderFunction();

	}

	private static boolean _entityCacheEnabled;
	private static boolean _finderCacheEnabled;

	private String _uuid;
	private String _originalUuid;
	private long _extraInfoId;
	private long _userId;
	private String _address;
	private String _address2;
	private String _city;
	private int _state;
	private String _zip;
	private long _columnBitmask;
	private UserExtraInfo _escapedModel;

}